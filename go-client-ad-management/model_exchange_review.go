/*
AdServer Ad Management

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ExchangeReview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeReview{}

// ExchangeReview Represents the review made by or requested to an exchange.
type ExchangeReview struct {
	// The ID of the review to be used later when submitting bids to display the ad this review refers to.
	ExchangeReviewId string `json:"exchangeReviewId"`
	// Indicates the status of the review: * `queued`: The ad is in the exchange submission queue. * `reviewing`: The exchange has received the ad and is reviewing it. * `approved`: The exchange has reviewed the ad and approved it. * `rejected`: The exchange has reviewed the ad and rejected it. Some details of why or what can be done can be found in the `comments` field. * `revoked`: The exchange has previously reviewed and approved the ad, but the approval was revoked. Some details of why or what can be done can be found in the `comments` field.
	Status string `json:"status"`
	// Any comments that the exchange reviewer deem important.
	Comments *string `json:"comments,omitempty"`
	// The exchange ID for this review.
	ExchangeId string `json:"exchangeId"`
	// When the review was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// NewExchangeReview instantiates a new ExchangeReview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeReview(exchangeReviewId string, status string, exchangeId string, updatedAt time.Time) *ExchangeReview {
	this := ExchangeReview{}
	this.ExchangeReviewId = exchangeReviewId
	this.Status = status
	this.ExchangeId = exchangeId
	this.UpdatedAt = updatedAt
	return &this
}

// NewExchangeReviewWithDefaults instantiates a new ExchangeReview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeReviewWithDefaults() *ExchangeReview {
	this := ExchangeReview{}
	return &this
}

// GetExchangeReviewId returns the ExchangeReviewId field value
func (o *ExchangeReview) GetExchangeReviewId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExchangeReviewId
}

// GetExchangeReviewIdOk returns a tuple with the ExchangeReviewId field value
// and a boolean to check if the value has been set.
func (o *ExchangeReview) GetExchangeReviewIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeReviewId, true
}

// SetExchangeReviewId sets field value
func (o *ExchangeReview) SetExchangeReviewId(v string) {
	o.ExchangeReviewId = v
}

// GetStatus returns the Status field value
func (o *ExchangeReview) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ExchangeReview) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ExchangeReview) SetStatus(v string) {
	o.Status = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *ExchangeReview) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeReview) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *ExchangeReview) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *ExchangeReview) SetComments(v string) {
	o.Comments = &v
}

// GetExchangeId returns the ExchangeId field value
func (o *ExchangeReview) GetExchangeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value
// and a boolean to check if the value has been set.
func (o *ExchangeReview) GetExchangeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeId, true
}

// SetExchangeId sets field value
func (o *ExchangeReview) SetExchangeId(v string) {
	o.ExchangeId = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ExchangeReview) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ExchangeReview) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ExchangeReview) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o ExchangeReview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeReview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exchangeReviewId"] = o.ExchangeReviewId
	toSerialize["status"] = o.Status
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	toSerialize["exchangeId"] = o.ExchangeId
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

type NullableExchangeReview struct {
	value *ExchangeReview
	isSet bool
}

func (v NullableExchangeReview) Get() *ExchangeReview {
	return v.value
}

func (v *NullableExchangeReview) Set(val *ExchangeReview) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeReview) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeReview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeReview(val *ExchangeReview) *NullableExchangeReview {
	return &NullableExchangeReview{value: val, isSet: true}
}

func (v NullableExchangeReview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeReview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


