/*
AdServer Ad Management

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ScheduleCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleCondition{}

// ScheduleCondition A `Condition` that defines time-based criteria for `AdRules`.
type ScheduleCondition struct {
	// Indicates the type of condition.
	Type string `json:"type"`
	// The point in time when this condition becomes valid.
	Start *time.Time `json:"start,omitempty"`
	// The point in time when this condition stops being valid, must be after `start` if it has been defined.
	End *time.Time `json:"end,omitempty"`
	// The windows within a week where this condition is applicable. The time zone used for reference will be the one in use by the user viewing the ad.
	TimesOfWeek []TimeOfWeek `json:"timesOfWeek,omitempty"`
}

// NewScheduleCondition instantiates a new ScheduleCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleCondition(type_ string) *ScheduleCondition {
	this := ScheduleCondition{}
	this.Type = type_
	return &this
}

// NewScheduleConditionWithDefaults instantiates a new ScheduleCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleConditionWithDefaults() *ScheduleCondition {
	this := ScheduleCondition{}
	return &this
}

// GetType returns the Type field value
func (o *ScheduleCondition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ScheduleCondition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ScheduleCondition) SetType(v string) {
	o.Type = v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ScheduleCondition) GetStart() time.Time {
	if o == nil || IsNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCondition) GetStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ScheduleCondition) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *ScheduleCondition) SetStart(v time.Time) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ScheduleCondition) GetEnd() time.Time {
	if o == nil || IsNil(o.End) {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCondition) GetEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ScheduleCondition) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *ScheduleCondition) SetEnd(v time.Time) {
	o.End = &v
}

// GetTimesOfWeek returns the TimesOfWeek field value if set, zero value otherwise.
func (o *ScheduleCondition) GetTimesOfWeek() []TimeOfWeek {
	if o == nil || IsNil(o.TimesOfWeek) {
		var ret []TimeOfWeek
		return ret
	}
	return o.TimesOfWeek
}

// GetTimesOfWeekOk returns a tuple with the TimesOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleCondition) GetTimesOfWeekOk() ([]TimeOfWeek, bool) {
	if o == nil || IsNil(o.TimesOfWeek) {
		return nil, false
	}
	return o.TimesOfWeek, true
}

// HasTimesOfWeek returns a boolean if a field has been set.
func (o *ScheduleCondition) HasTimesOfWeek() bool {
	if o != nil && !IsNil(o.TimesOfWeek) {
		return true
	}

	return false
}

// SetTimesOfWeek gets a reference to the given []TimeOfWeek and assigns it to the TimesOfWeek field.
func (o *ScheduleCondition) SetTimesOfWeek(v []TimeOfWeek) {
	o.TimesOfWeek = v
}

func (o ScheduleCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.TimesOfWeek) {
		toSerialize["timesOfWeek"] = o.TimesOfWeek
	}
	return toSerialize, nil
}

type NullableScheduleCondition struct {
	value *ScheduleCondition
	isSet bool
}

func (v NullableScheduleCondition) Get() *ScheduleCondition {
	return v.value
}

func (v *NullableScheduleCondition) Set(val *ScheduleCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleCondition(val *ScheduleCondition) *NullableScheduleCondition {
	return &NullableScheduleCondition{value: val, isSet: true}
}

func (v NullableScheduleCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


