/*
AdServer Creative Management

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CreativeGroupsAPIService CreativeGroupsAPI service
type CreativeGroupsAPIService service

type ApiCreateCreativeGroupRequest struct {
	ctx context.Context
	ApiService *CreativeGroupsAPIService
	accountId string
	creativeGroupCreateFields *CreativeGroupCreateFields
}

func (r ApiCreateCreativeGroupRequest) CreativeGroupCreateFields(creativeGroupCreateFields CreativeGroupCreateFields) ApiCreateCreativeGroupRequest {
	r.creativeGroupCreateFields = &creativeGroupCreateFields
	return r
}

func (r ApiCreateCreativeGroupRequest) Execute() (*CreativeGroup, *http.Response, error) {
	return r.ApiService.CreateCreativeGroupExecute(r)
}

/*
CreateCreativeGroup Create Creative Group

Creates a new creative group.

**Notes:**
1. All creatives must match the *domain* and *spec* defined (e.g. a banner 300x600 linking to example.com).
1. The creative group must have at least one creative.
1. Publishes event `CreativeGroupCreatedEvent` with the creative group as message.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account.
 @return ApiCreateCreativeGroupRequest
*/
func (a *CreativeGroupsAPIService) CreateCreativeGroup(ctx context.Context, accountId string) ApiCreateCreativeGroupRequest {
	return ApiCreateCreativeGroupRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return CreativeGroup
func (a *CreativeGroupsAPIService) CreateCreativeGroupExecute(r ApiCreateCreativeGroupRequest) (*CreativeGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreativeGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreativeGroupsAPIService.CreateCreativeGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountId}/creative-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.creativeGroupCreateFields == nil {
		return localVarReturnValue, nil, reportError("creativeGroupCreateFields is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.creativeGroupCreateFields
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCreativeGroupRequest struct {
	ctx context.Context
	ApiService *CreativeGroupsAPIService
	accountId string
	creativeGroupId string
}

func (r ApiDeleteCreativeGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCreativeGroupExecute(r)
}

/*
DeleteCreativeGroup Delete Creative Group

Deletes a creative group.

**Notes:**
1. Publishes event `CreativeGroupDeletedEvent` with the original creative group as message.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account.
 @param creativeGroupId The ID of the creative group.
 @return ApiDeleteCreativeGroupRequest
*/
func (a *CreativeGroupsAPIService) DeleteCreativeGroup(ctx context.Context, accountId string, creativeGroupId string) ApiDeleteCreativeGroupRequest {
	return ApiDeleteCreativeGroupRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		creativeGroupId: creativeGroupId,
	}
}

// Execute executes the request
func (a *CreativeGroupsAPIService) DeleteCreativeGroupExecute(r ApiDeleteCreativeGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreativeGroupsAPIService.DeleteCreativeGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountId}/creative-groups/{creativeGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"creativeGroupId"+"}", url.PathEscape(parameterValueToString(r.creativeGroupId, "creativeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCreativeGroupRequest struct {
	ctx context.Context
	ApiService *CreativeGroupsAPIService
	accountId string
	creativeGroupId string
}

func (r ApiGetCreativeGroupRequest) Execute() (*CreativeGroup, *http.Response, error) {
	return r.ApiService.GetCreativeGroupExecute(r)
}

/*
GetCreativeGroup Get Creative Group

Returns a creative group by its ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account.
 @param creativeGroupId The ID of the creative group.
 @return ApiGetCreativeGroupRequest
*/
func (a *CreativeGroupsAPIService) GetCreativeGroup(ctx context.Context, accountId string, creativeGroupId string) ApiGetCreativeGroupRequest {
	return ApiGetCreativeGroupRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		creativeGroupId: creativeGroupId,
	}
}

// Execute executes the request
//  @return CreativeGroup
func (a *CreativeGroupsAPIService) GetCreativeGroupExecute(r ApiGetCreativeGroupRequest) (*CreativeGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreativeGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreativeGroupsAPIService.GetCreativeGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountId}/creative-groups/{creativeGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"creativeGroupId"+"}", url.PathEscape(parameterValueToString(r.creativeGroupId, "creativeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCreativeGroupAvailableCreativesRequest struct {
	ctx context.Context
	ApiService *CreativeGroupsAPIService
	accountId string
	creativeGroupId string
}

func (r ApiGetCreativeGroupAvailableCreativesRequest) Execute() ([]AvailableCreative, *http.Response, error) {
	return r.ApiService.GetCreativeGroupAvailableCreativesExecute(r)
}

/*
GetCreativeGroupAvailableCreatives Get Creative Group Available Creatives

Returns the creatives that are available for the given creative group.

**Notes:**
1. Only the creatives with status of `approved` and `enabled` equals to `true` can be returned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account.
 @param creativeGroupId The ID of the creative group.
 @return ApiGetCreativeGroupAvailableCreativesRequest
*/
func (a *CreativeGroupsAPIService) GetCreativeGroupAvailableCreatives(ctx context.Context, accountId string, creativeGroupId string) ApiGetCreativeGroupAvailableCreativesRequest {
	return ApiGetCreativeGroupAvailableCreativesRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		creativeGroupId: creativeGroupId,
	}
}

// Execute executes the request
//  @return []AvailableCreative
func (a *CreativeGroupsAPIService) GetCreativeGroupAvailableCreativesExecute(r ApiGetCreativeGroupAvailableCreativesRequest) ([]AvailableCreative, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AvailableCreative
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreativeGroupsAPIService.GetCreativeGroupAvailableCreatives")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountId}/creative-groups/{creativeGroupId}/creatives:available"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"creativeGroupId"+"}", url.PathEscape(parameterValueToString(r.creativeGroupId, "creativeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCreativeGroupsRequest struct {
	ctx context.Context
	ApiService *CreativeGroupsAPIService
	accountId string
	filters *string
	pageSize *float32
	pageToken *string
}

// The applicable filters, a json object according with &#x60;CreativeGroupFilters&#x60;.
func (r ApiListCreativeGroupsRequest) Filters(filters string) ApiListCreativeGroupsRequest {
	r.filters = &filters
	return r
}

// The page size.
func (r ApiListCreativeGroupsRequest) PageSize(pageSize float32) ApiListCreativeGroupsRequest {
	r.pageSize = &pageSize
	return r
}

// The page token from which to continue listing.
func (r ApiListCreativeGroupsRequest) PageToken(pageToken string) ApiListCreativeGroupsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListCreativeGroupsRequest) Execute() (*CreativeGroupPage, *http.Response, error) {
	return r.ApiService.ListCreativeGroupsExecute(r)
}

/*
ListCreativeGroups List Creative Groups

Returns a pageable list of creative groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account.
 @return ApiListCreativeGroupsRequest
*/
func (a *CreativeGroupsAPIService) ListCreativeGroups(ctx context.Context, accountId string) ApiListCreativeGroupsRequest {
	return ApiListCreativeGroupsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return CreativeGroupPage
func (a *CreativeGroupsAPIService) ListCreativeGroupsExecute(r ApiListCreativeGroupsRequest) (*CreativeGroupPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreativeGroupPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreativeGroupsAPIService.ListCreativeGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountId}/creative-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCreativeGroupRequest struct {
	ctx context.Context
	ApiService *CreativeGroupsAPIService
	accountId string
	creativeGroupId string
	creativeGroupPatchFields *CreativeGroupPatchFields
}

func (r ApiPatchCreativeGroupRequest) CreativeGroupPatchFields(creativeGroupPatchFields CreativeGroupPatchFields) ApiPatchCreativeGroupRequest {
	r.creativeGroupPatchFields = &creativeGroupPatchFields
	return r
}

func (r ApiPatchCreativeGroupRequest) Execute() (*CreativeGroup, *http.Response, error) {
	return r.ApiService.PatchCreativeGroupExecute(r)
}

/*
PatchCreativeGroup Patch Creative Group

Patches a creative group.

**Notes:**
1. All creatives must match the *domain* and *spec* defined (e.g. a banner 300x600 linking to example.com).
1. Publishes event `CreativeGroupPatchedEvent` with the updated creative group as message.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId The ID of the account.
 @param creativeGroupId The ID of the creative group.
 @return ApiPatchCreativeGroupRequest
*/
func (a *CreativeGroupsAPIService) PatchCreativeGroup(ctx context.Context, accountId string, creativeGroupId string) ApiPatchCreativeGroupRequest {
	return ApiPatchCreativeGroupRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		creativeGroupId: creativeGroupId,
	}
}

// Execute executes the request
//  @return CreativeGroup
func (a *CreativeGroupsAPIService) PatchCreativeGroupExecute(r ApiPatchCreativeGroupRequest) (*CreativeGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreativeGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreativeGroupsAPIService.PatchCreativeGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{accountId}/creative-groups/{creativeGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"creativeGroupId"+"}", url.PathEscape(parameterValueToString(r.creativeGroupId, "creativeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.creativeGroupPatchFields == nil {
		return localVarReturnValue, nil, reportError("creativeGroupPatchFields is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.creativeGroupPatchFields
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
