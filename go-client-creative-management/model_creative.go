/*
AdServer Creative Management

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Creative type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Creative{}

// Creative Represents some type of art that can be served in an Ad.
type Creative struct {
	// The domain that this creative is going to redirect to.
	Domain string `json:"domain"`
	// The name of the creative.
	Name string `json:"name"`
	// Tags that the user can add to facilitate searching.
	Tags []string `json:"tags"`
	Banner *CreativeCreateFieldsAllOfBanner `json:"banner,omitempty"`
	// The ID of the creative.
	CreativeId string `json:"creativeId"`
	// Indicates the status of the creative.
	Status string `json:"status"`
	// The ID of the account that owns this creative.
	AccountId string `json:"accountId"`
	// Indicates if it is archived.
	Archived bool `json:"archived"`
	// Indicates if the creative is enabled for usage.
	Enabled bool `json:"enabled"`
}

// NewCreative instantiates a new Creative object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreative(domain string, name string, tags []string, creativeId string, status string, accountId string, archived bool, enabled bool) *Creative {
	this := Creative{}
	this.Domain = domain
	this.Name = name
	this.Tags = tags
	this.CreativeId = creativeId
	this.Status = status
	this.AccountId = accountId
	this.Archived = archived
	this.Enabled = enabled
	return &this
}

// NewCreativeWithDefaults instantiates a new Creative object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreativeWithDefaults() *Creative {
	this := Creative{}
	return &this
}

// GetDomain returns the Domain field value
func (o *Creative) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *Creative) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *Creative) SetDomain(v string) {
	o.Domain = v
}

// GetName returns the Name field value
func (o *Creative) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Creative) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Creative) SetName(v string) {
	o.Name = v
}

// GetTags returns the Tags field value
func (o *Creative) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Creative) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *Creative) SetTags(v []string) {
	o.Tags = v
}

// GetBanner returns the Banner field value if set, zero value otherwise.
func (o *Creative) GetBanner() CreativeCreateFieldsAllOfBanner {
	if o == nil || IsNil(o.Banner) {
		var ret CreativeCreateFieldsAllOfBanner
		return ret
	}
	return *o.Banner
}

// GetBannerOk returns a tuple with the Banner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Creative) GetBannerOk() (*CreativeCreateFieldsAllOfBanner, bool) {
	if o == nil || IsNil(o.Banner) {
		return nil, false
	}
	return o.Banner, true
}

// HasBanner returns a boolean if a field has been set.
func (o *Creative) HasBanner() bool {
	if o != nil && !IsNil(o.Banner) {
		return true
	}

	return false
}

// SetBanner gets a reference to the given CreativeCreateFieldsAllOfBanner and assigns it to the Banner field.
func (o *Creative) SetBanner(v CreativeCreateFieldsAllOfBanner) {
	o.Banner = &v
}

// GetCreativeId returns the CreativeId field value
func (o *Creative) GetCreativeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreativeId
}

// GetCreativeIdOk returns a tuple with the CreativeId field value
// and a boolean to check if the value has been set.
func (o *Creative) GetCreativeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreativeId, true
}

// SetCreativeId sets field value
func (o *Creative) SetCreativeId(v string) {
	o.CreativeId = v
}

// GetStatus returns the Status field value
func (o *Creative) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Creative) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Creative) SetStatus(v string) {
	o.Status = v
}

// GetAccountId returns the AccountId field value
func (o *Creative) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Creative) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Creative) SetAccountId(v string) {
	o.AccountId = v
}

// GetArchived returns the Archived field value
func (o *Creative) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *Creative) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *Creative) SetArchived(v bool) {
	o.Archived = v
}

// GetEnabled returns the Enabled field value
func (o *Creative) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Creative) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Creative) SetEnabled(v bool) {
	o.Enabled = v
}

func (o Creative) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Creative) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["name"] = o.Name
	toSerialize["tags"] = o.Tags
	if !IsNil(o.Banner) {
		toSerialize["banner"] = o.Banner
	}
	toSerialize["creativeId"] = o.CreativeId
	toSerialize["status"] = o.Status
	toSerialize["accountId"] = o.AccountId
	toSerialize["archived"] = o.Archived
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

type NullableCreative struct {
	value *Creative
	isSet bool
}

func (v NullableCreative) Get() *Creative {
	return v.value
}

func (v *NullableCreative) Set(val *Creative) {
	v.value = val
	v.isSet = true
}

func (v NullableCreative) IsSet() bool {
	return v.isSet
}

func (v *NullableCreative) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreative(val *Creative) *NullableCreative {
	return &NullableCreative{value: val, isSet: true}
}

func (v NullableCreative) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreative) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


