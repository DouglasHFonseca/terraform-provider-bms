/*
AdServer Creative Management

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreativeFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreativeFilters{}

// CreativeFilters Filters applicable to creatives.
type CreativeFilters struct {
	// Generic search that can match against id, name, tag and domain.
	Search *string `json:"search,omitempty"`
	// An array of IDs to search for.
	CreativeIds []string `json:"creativeIds,omitempty"`
	// The list of creative group IDs to search usage for.
	CreativeGroupIds []string `json:"creativeGroupIds,omitempty"`
	// The status to search for.
	Status *string `json:"status,omitempty"`
	// The tag to look for.
	Tag *string `json:"tag,omitempty"`
	// The domain to filter.
	Domain *string `json:"domain,omitempty"`
	// `true` to include only archived creatives, `false` to include only active, leave empty to include all.
	Archived *bool `json:"archived,omitempty"`
	// The name to search for.
	Name *string `json:"name,omitempty"`
	Spec *CreativeSpec `json:"spec,omitempty"`
	// `true` to include only enabled creatives, `false` to include only disabled, leave empty to include all.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewCreativeFilters instantiates a new CreativeFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreativeFilters() *CreativeFilters {
	this := CreativeFilters{}
	return &this
}

// NewCreativeFiltersWithDefaults instantiates a new CreativeFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreativeFiltersWithDefaults() *CreativeFilters {
	this := CreativeFilters{}
	return &this
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *CreativeFilters) GetSearch() string {
	if o == nil || IsNil(o.Search) {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetSearchOk() (*string, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *CreativeFilters) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *CreativeFilters) SetSearch(v string) {
	o.Search = &v
}

// GetCreativeIds returns the CreativeIds field value if set, zero value otherwise.
func (o *CreativeFilters) GetCreativeIds() []string {
	if o == nil || IsNil(o.CreativeIds) {
		var ret []string
		return ret
	}
	return o.CreativeIds
}

// GetCreativeIdsOk returns a tuple with the CreativeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetCreativeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CreativeIds) {
		return nil, false
	}
	return o.CreativeIds, true
}

// HasCreativeIds returns a boolean if a field has been set.
func (o *CreativeFilters) HasCreativeIds() bool {
	if o != nil && !IsNil(o.CreativeIds) {
		return true
	}

	return false
}

// SetCreativeIds gets a reference to the given []string and assigns it to the CreativeIds field.
func (o *CreativeFilters) SetCreativeIds(v []string) {
	o.CreativeIds = v
}

// GetCreativeGroupIds returns the CreativeGroupIds field value if set, zero value otherwise.
func (o *CreativeFilters) GetCreativeGroupIds() []string {
	if o == nil || IsNil(o.CreativeGroupIds) {
		var ret []string
		return ret
	}
	return o.CreativeGroupIds
}

// GetCreativeGroupIdsOk returns a tuple with the CreativeGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetCreativeGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CreativeGroupIds) {
		return nil, false
	}
	return o.CreativeGroupIds, true
}

// HasCreativeGroupIds returns a boolean if a field has been set.
func (o *CreativeFilters) HasCreativeGroupIds() bool {
	if o != nil && !IsNil(o.CreativeGroupIds) {
		return true
	}

	return false
}

// SetCreativeGroupIds gets a reference to the given []string and assigns it to the CreativeGroupIds field.
func (o *CreativeFilters) SetCreativeGroupIds(v []string) {
	o.CreativeGroupIds = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CreativeFilters) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CreativeFilters) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CreativeFilters) SetStatus(v string) {
	o.Status = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *CreativeFilters) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *CreativeFilters) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *CreativeFilters) SetTag(v string) {
	o.Tag = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *CreativeFilters) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *CreativeFilters) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *CreativeFilters) SetDomain(v string) {
	o.Domain = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *CreativeFilters) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *CreativeFilters) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *CreativeFilters) SetArchived(v bool) {
	o.Archived = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreativeFilters) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreativeFilters) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreativeFilters) SetName(v string) {
	o.Name = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *CreativeFilters) GetSpec() CreativeSpec {
	if o == nil || IsNil(o.Spec) {
		var ret CreativeSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetSpecOk() (*CreativeSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *CreativeFilters) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given CreativeSpec and assigns it to the Spec field.
func (o *CreativeFilters) SetSpec(v CreativeSpec) {
	o.Spec = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CreativeFilters) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativeFilters) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CreativeFilters) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CreativeFilters) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o CreativeFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreativeFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.CreativeIds) {
		toSerialize["creativeIds"] = o.CreativeIds
	}
	if !IsNil(o.CreativeGroupIds) {
		toSerialize["creativeGroupIds"] = o.CreativeGroupIds
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableCreativeFilters struct {
	value *CreativeFilters
	isSet bool
}

func (v NullableCreativeFilters) Get() *CreativeFilters {
	return v.value
}

func (v *NullableCreativeFilters) Set(val *CreativeFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableCreativeFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableCreativeFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreativeFilters(val *CreativeFilters) *NullableCreativeFilters {
	return &NullableCreativeFilters{value: val, isSet: true}
}

func (v NullableCreativeFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreativeFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


