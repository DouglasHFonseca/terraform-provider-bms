/*
AdServer Creative Management

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreativePatchFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreativePatchFields{}

// CreativePatchFields `Creative` editable fields.
type CreativePatchFields struct {
	Banner *BannerFields `json:"banner,omitempty"`
	// The name of the creative.
	Name *string `json:"name,omitempty"`
	// Tags that the user can add to facilitate searching.
	Tags []string `json:"tags,omitempty"`
	// Indicates if it is archived.
	Archived *bool `json:"archived,omitempty"`
	// Indicates if the creative is enabled for usage.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewCreativePatchFields instantiates a new CreativePatchFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreativePatchFields() *CreativePatchFields {
	this := CreativePatchFields{}
	return &this
}

// NewCreativePatchFieldsWithDefaults instantiates a new CreativePatchFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreativePatchFieldsWithDefaults() *CreativePatchFields {
	this := CreativePatchFields{}
	return &this
}

// GetBanner returns the Banner field value if set, zero value otherwise.
func (o *CreativePatchFields) GetBanner() BannerFields {
	if o == nil || IsNil(o.Banner) {
		var ret BannerFields
		return ret
	}
	return *o.Banner
}

// GetBannerOk returns a tuple with the Banner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativePatchFields) GetBannerOk() (*BannerFields, bool) {
	if o == nil || IsNil(o.Banner) {
		return nil, false
	}
	return o.Banner, true
}

// HasBanner returns a boolean if a field has been set.
func (o *CreativePatchFields) HasBanner() bool {
	if o != nil && !IsNil(o.Banner) {
		return true
	}

	return false
}

// SetBanner gets a reference to the given BannerFields and assigns it to the Banner field.
func (o *CreativePatchFields) SetBanner(v BannerFields) {
	o.Banner = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreativePatchFields) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativePatchFields) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreativePatchFields) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreativePatchFields) SetName(v string) {
	o.Name = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreativePatchFields) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativePatchFields) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreativePatchFields) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CreativePatchFields) SetTags(v []string) {
	o.Tags = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *CreativePatchFields) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativePatchFields) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *CreativePatchFields) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *CreativePatchFields) SetArchived(v bool) {
	o.Archived = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CreativePatchFields) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreativePatchFields) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CreativePatchFields) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CreativePatchFields) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o CreativePatchFields) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreativePatchFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Banner) {
		toSerialize["banner"] = o.Banner
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableCreativePatchFields struct {
	value *CreativePatchFields
	isSet bool
}

func (v NullableCreativePatchFields) Get() *CreativePatchFields {
	return v.value
}

func (v *NullableCreativePatchFields) Set(val *CreativePatchFields) {
	v.value = val
	v.isSet = true
}

func (v NullableCreativePatchFields) IsSet() bool {
	return v.isSet
}

func (v *NullableCreativePatchFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreativePatchFields(val *CreativePatchFields) *NullableCreativePatchFields {
	return &NullableCreativePatchFields{value: val, isSet: true}
}

func (v NullableCreativePatchFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreativePatchFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


