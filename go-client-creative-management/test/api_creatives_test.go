/*
AdServer Creative Management

Testing CreativesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_CreativesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CreativesAPIService CreateCreative", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.CreativesAPI.CreateCreative(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreativesAPIService DeleteCreative", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var creativeId string

		httpRes, err := apiClient.CreativesAPI.DeleteCreative(context.Background(), accountId, creativeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreativesAPIService GetCreative", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var creativeId string

		resp, httpRes, err := apiClient.CreativesAPI.GetCreative(context.Background(), accountId, creativeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreativesAPIService ListCreatives", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.CreativesAPI.ListCreatives(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreativesAPIService PatchCreative", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var creativeId string

		resp, httpRes, err := apiClient.CreativesAPI.PatchCreative(context.Background(), accountId, creativeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreativesAPIService SendCreativeForReview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var creativeId string

		httpRes, err := apiClient.CreativesAPI.SendCreativeForReview(context.Background(), accountId, creativeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
